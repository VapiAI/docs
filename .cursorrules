## Purpose

Provide developers with documentation that is quick to read, easy to follow, and immediately actionable.  
Each page should meet the following principles:

| Principle            | Description                                                   |
| -------------------- | ------------------------------------------------------------- |
| **Clarity**          | Use plain language—avoid jargon or unnecessary complexity.    |
| **Brevity**          | Keep sentences and paragraphs short.                          |
| **Task‑orientation** | Present steps in a logical order that help the reader proceed.|
| **Scannability**     | Apply headings, spacing, and components that aid quick review.|
| **Outcome focus**    | Ensure every section directly supports the user’s success.    |

---

## Style rules

- **Titles**: Capitalize only the first word unless a proper noun is used.  
  *Examples*: `Getting started`, `Voice AI`, `API reference`
- **Subtitles**: Begin with *Learn to …* for guides; otherwise keep them concise and factual.
- **Emojis / decorative icons**: Use only when essential for comprehension.
- Tone: Direct, professional, friendly.
- Break up large blocks of text with line‑breaks.
- Avoid marketing or promotional wording.
- Link to related pages when helpful, especially the **API reference** at `/fern/api-reference`.
- Use **bold** text to emphasize key names or concepts.

### Writing style & tone

| Guideline | Why it matters |
|-----------|---------------|
| **Active voice** | “Connect the SDK” is clearer than “The SDK should be connected.” |
| **Present tense** | Keeps instructions straightforward (e.g., “Run” not “You will run”). |
| **Second‑person (“you”)** | Speaks directly to the reader. Reserve “we” for collaborative tutorials. |
| **Explain intent before action** | Briefly state *why* a step is needed, then show *how*. |
| **Concrete examples over theory** | Code snippets and visuals anchor concepts. |
| **Consistent terminology** | Define a term once; reuse it exactly the same everywhere. |
| **Parallel structure** | Lists and headings should follow consistent grammatical patterns. |
| **Descriptive link text** | Use “view the guide” rather than “click here.” |
| **Comment code sparsely** | Only where intent isn’t obvious from variable/function names. |

> **Rule of thumb**: every sentence should either clarify *why* or *how*—if it does neither, remove or rewrite it.

---

## MDX front‑matter template

```mdx
---
title: <short title>
subtitle: <concise subtitle>
---
```

### Sample titles

- Getting started  
- Assistants  
- Variables  

### Sample subtitles

- Build a voice assistant that answers questions about your docs
- Personalize assistant messages with dynamic and default variables

---

## Asset conventions

All images are stored in `/fern/static/images` (top‑level, not nested).  
Reference images with:

```mdx
![alt‑text](/assets/images/<file‑name>.<ext>)
```

---

## Recommended components

### Accordions *(FAQ sections only)*

```mdx
<AccordionGroup>
  <Accordion title="Question 1">Answer</Accordion>
</AccordionGroup>
```

### Callouts

```mdx
<Tip>Helpful tip</Tip>
<Note>Important note</Note>
<Warning>Important caution</Warning>
<Error>Possible error</Error>
<Info>Additional information</Info>
<Check>Successful outcome</Check>
```

### Cards & Card groups

```mdx
<Card title="Python" icon="brands python" href="https://github.com/VapiAI/server-sdk-python">
  View Vapi’s Python server SDK.
</Card>
```

### Code snippets

```javascript maxLines=10 wordWrap
console.log('Hello, world');
```

### Multi‑language code blocks

```mdx
<CodeBlocks>
```python title="hello.py"
print("Hello")
```
```javascript title="hello.js"
console.log("Hello")
```
</CodeBlocks>
```

### Step lists

```mdx
<Steps>
  <Step title="First step">Do this.</Step>
  <Step title="Second step">Do that.</Step>
  <Step title="Third step">Finished.</Step>
</Steps>
```

### Frames for images

```mdx
<Frame caption="Mountain range">
  <img src="/assets/images/mountains.jpg" alt="Mountains" />
</Frame>
```

### Tabs

```mdx
<Tabs>
  <Tab title="First">Content A</Tab>
  <Tab title="Second">Content B</Tab>
</Tabs>
```

---

## Documentation sections & best practices

Drawing from Chris Nicholas’ *How to Write Exceptional Documentation* (Mar 2025), structure docs into purposeful sections so every developer quickly finds the right depth of information.

### Quickstart

| Objective | Get a new user to a “Hello World” moment fast |
|-----------|----------------------------------------------|
| **Scope** | Only the minimal steps required; one guide per supported tech |
| **Tips**  | • Use numbered steps and visuals  
• Pre‑fill API keys where possible  
• Test end‑to‑end after every edit |

### Tutorials

Teach broader concepts by **building something tangible** together.
- Progressively increase complexity.  
- Add interactive elements (live code, mini‑quizzes).  
- Highlight best practices and link to deeper docs.

### How‑to Guides

Solve a **specific problem** for existing users.
- State the goal up front and list prerequisites.  
- Derive topics from recurring support questions.  
- Link to sample repos when helpful.

### Explanations

Explain concepts, architecture, or reasoning.
- Use diagrams and succinct prose—keep marketing out.  
- Include basic code when it clarifies the concept.

### API Reference

Exhaustive, factual details for each endpoint / method.
- Lead with the simplest usage pattern.  
- Use props / args / returns tables.  
- Anticipate errors and include handling guidance.  
- Cross‑link abundantly and follow familiar REST / OpenAPI layouts where applicable.

### Examples

Small, focused demos that show how to implement one feature.
- Display copy‑pasteable code.  
- Provide live, interactive previews when feasible.

### Templates

Full, production‑ready starter projects.
- Follow industry best practices and heavy inline commenting.  
- Offer one‑click deploy or CLI installers.  
- Use templates as reference material and marketing demos.

> **Iterate continuously.** Listen to user feedback and refine each section; great docs emerge through constant improvement.

---

## Example page skeleton

```mdx
---
title: Voice AI
subtitle: Learn how to build and deploy voice agents with Vapi.
---

## Overview

Vapi [Voice AI](/docs/assistants) enables you to build conversational agents for phone, web, and other platforms.

- Automate outbound support and sales  
- Integrate with your CRM  
- Deploy on phone, web, or mobile

For details, see **Assistants**.

## Parameters

| Name             | Purpose                                 |
| ---------------- | --------------------------------------- |
| `model`          | LLM used for conversations              |
| `voice`          | Voice profile for the agent             |
| `knowledge_base` | Documents and data for context          |
| `tools`          | Integrations and actions the agent uses |

## FAQ

<AccordionGroup>
  <Accordion title="How do I create an assistant?">
    Visit the [Assistants](/docs/assistants) page and follow the guide.
  </Accordion>
</AccordionGroup>
```

---