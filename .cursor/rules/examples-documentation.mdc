---
description: Guidelines for example documentation and use case implementations
globs: **/examples/*.mdx,**/**/examples/*.mdx
alwaysApply: false
---

# Example Documentation Standards

Examples should be **small, focused demos** that show how to implement one feature or use case.

## Required Sections

1. **Overview** - What the example builds and demonstrates
2. **Prerequisites** - Account requirements and setup needed
3. **Step-by-step implementation** - Detailed walkthrough
4. **Testing/validation** - How to verify it works
5. **Next steps** - Links to related examples or advanced topics

## Content Guidelines

### Opening Structure
```mdx
## Overview

[1-2 sentence description of what this example demonstrates]

**[Agent/Workflow] Capabilities:**
* [Specific capability 1]
* [Specific capability 2]

**What You'll Build:**
* [Concrete deliverable 1]
* [Concrete deliverable 2]
* [Concrete deliverable 3]
```

### Implementation Approach
- **Multi-modal examples**: Always provide both Dashboard and SDK approaches
- **Complete code**: Include all imports, error handling, and setup
- **Real-world context**: Use realistic data and scenarios
- **Production-ready**: Follow best practices and include security considerations

### Code Organization
Use `<Tabs>` or `<CodeBlocks>` for multiple implementation approaches:
- Dashboard (visual, no-code)
- TypeScript (Server SDK)
- Python (Server SDK)
- Additional languages as relevant

### Data and Assets
- Include downloadable sample data (CSVs, JSON files)
- Provide realistic test scenarios
- Use placeholder data that reflects real use cases

## Quality Standards

### Code Quality
- All code examples must be tested and functional
- Include proper error handling
- Use environment variables for sensitive data
- Follow language-specific best practices

### Documentation Quality
- Explain the reasoning behind implementation choices
- Include common gotchas and troubleshooting
- Provide context for business use cases
- Link to relevant API documentation

### User Experience
- Clear success criteria for each step
- Visual confirmation (screenshots, videos)
- Downloadable resources when helpful
- Progressive complexity (simple â†’ advanced)

## Templates

### Example Overview
```mdx
---
title: [Use case name]
subtitle: [Brief description of what users will build]
slug: [category]/examples/[example-name]
---

## Overview

[Detailed description of the use case and what the example demonstrates]

**[Type] Capabilities:**
* [Key capability 1]
* [Key capability 2]

**What You'll Build:**
* [Deliverable 1 with tools/integrations]
* [Deliverable 2 with specific features]
* [Deliverable 3 with validation/testing]

## Prerequisites

* [Account requirement]
* [Tool/service requirement if applicable]
```

### Step Implementation
```mdx
<Steps>
  <Step title="[Action-oriented title]">
    [Brief explanation of the step's purpose]

    <Tabs>
      <Tab title="Dashboard">
        [Visual step-by-step with screenshots]
      </Tab>
      <Tab title="TypeScript (Server SDK)">
        [Complete code example]
      </Tab>
      <Tab title="Python (Server SDK)">
        [Complete code example]
      </Tab>
    </Tabs>
  </Step>
</Steps>
``` 
