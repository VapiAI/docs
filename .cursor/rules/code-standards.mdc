---
description: Code quality standards and best practices for documentation examples. Should be used whenever a code snippet needs to be included in the document.
globs: 
alwaysApply: false
---

# Code Quality Standards

## General Principles

### Code Documentation
- All code examples must be **tested and functional**
- Include all necessary imports and dependencies
- Use realistic placeholder values (e.g., `YOUR_API_KEY`, `your-assistant-id`)
- Follow language-specific conventions and best practices

### Error Handling
- Include proper error handling in all examples
- Show both success and failure scenarios
- Provide meaningful error messages and debugging guidance
- Use try-catch blocks where appropriate

### Security Best Practices
- Never hardcode API keys or sensitive data
- Use environment variables for configuration
- Include security warnings where relevant
- Follow OAuth/API key best practices

## Language-Specific Standards

### TypeScript/JavaScript
```typescript
// ✅ Good - Proper imports and error handling
import { VapiClient } from "@vapi-ai/server-sdk";

const vapi = new VapiClient({ 
  token: process.env.VAPI_API_KEY 
});

try {
  const assistant = await vapi.assistants.create({
    name: "Customer Support",
    // ... configuration
  });
  console.log(`Assistant created: ${assistant.id}`);
} catch (error) {
  console.error("Failed to create assistant:", error);
}
```

### Python
```python
# ✅ Good - Proper imports and error handling
import os
from vapi import Vapi

client = Vapi(token=os.getenv("VAPI_API_KEY"))

try:
    assistant = client.assistants.create(
        name="Customer Support",
        # ... configuration
    )
    print(f"Assistant created: {assistant.id}")
except Exception as error:
    print(f"Failed to create assistant: {error}")
```

### cURL
```bash
# ✅ Good - Proper headers and error codes
curl -X POST "https://api.vapi.ai/assistant" \
     -H "Authorization: Bearer $VAPI_API_KEY" \
     -H "Content-Type: application/json" \
     -d '{
       "name": "Customer Support"
     }' \
     --fail-with-body
```

## Code Block Formatting

### Multi-language Examples
Always provide multiple implementation options using Fern's `<CodeBlocks>`:

```mdx
<CodeBlocks>
```typescript title="TypeScript SDK"
// Complete working example
```
```python title="Python SDK"
# Complete working example
```
```bash title="cURL"
# Complete working example
```
</CodeBlocks>
```

### Code Attributes
Use appropriate attributes for code blocks:
- `maxLines=10` for long examples
- `wordWrap` for wide content
- `title="filename.ext"` for file examples
- `{2-4}` for line highlighting

### Placeholder Standards
- `YOUR_API_KEY` for API keys
- `YOUR_ASSISTANT_ID` for resource IDs
- `your-phone-number` for phone numbers
- `your-webhook-url` for URLs

## Production Readiness

### Environment Configuration
```typescript
// ✅ Good - Environment-based configuration
const config = {
  apiKey: process.env.VAPI_API_KEY,
  baseUrl: process.env.VAPI_BASE_URL || 'https://api.vapi.ai',
  timeout: parseInt(process.env.VAPI_TIMEOUT || '30000')
};
```

### Rate Limiting
```typescript
// ✅ Good - Include rate limiting considerations
async function bulkCreateAssistants(configs: AssistantConfig[]) {
  const results = [];
  for (const config of configs) {
    try {
      const assistant = await vapi.assistants.create(config);
      results.push(assistant);
      
      // Rate limiting - wait between requests
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
      console.error(`Failed to create assistant: ${error}`);
    }
  }
  return results;
}
``` 
